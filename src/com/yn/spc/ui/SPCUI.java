/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.yn.spc.ui;


import java.awt.AWTException;
import java.awt.Dimension;
import java.awt.Image;
import java.awt.MenuItem;
import java.awt.PopupMenu;
import java.awt.SystemTray;
import java.awt.Toolkit;
import java.awt.TrayIcon;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.image.BufferedImage;
import java.io.BufferedInputStream;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.sql.SQLException;
import java.util.Properties;

import javax.imageio.ImageIO;
import javax.swing.JFrame;
import javax.swing.JTextArea;
import javax.swing.SwingUtilities;

import net.contentobjects.jnotify.JNotifyException;

import org.hibernate.MappingException;

import com.yn.spc.util.DBOptionUtil;
import com.yn.spc.servers.dao.FileMonitorDAO;

/**
 *
 * @author fan.cai
 */
public class SPCUI extends javax.swing.JFrame {

    /**
	 * 
	 */
	private static final long serialVersionUID = 2814393656135035642L;
	
    /**系统托盘*/ 
    private SystemTray systemTray; 
       
    /**托盘图标*/ 
    private TrayIcon trayIcon; 	
	
	/**
     * Creates new form SPCUI
     * @throws FileNotFoundException 
     */
    public SPCUI() throws FileNotFoundException {
        initComponents();
    }
    
   

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     * @throws FileNotFoundException 
     */
    @SuppressWarnings("unchecked")                     
    private void initComponents() throws FileNotFoundException {
        dataSourceDiglog = new javax.swing.JDialog();
        jPanel3 = new javax.swing.JPanel();
        url = new javax.swing.JLabel();
        urlText = new javax.swing.JTextField();
        userName = new javax.swing.JLabel();
        password = new javax.swing.JLabel();
        userNameText = new javax.swing.JTextField();
        passWordText = new javax.swing.JPasswordField();
        connect = new javax.swing.JButton();
        cancel = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        
        //log = new java.awt.TextArea();
        log = new JTextArea();
        
        jPanel1 = new javax.swing.JPanel();
        stop = new javax.swing.JButton();
        start = new javax.swing.JButton();
        selectType = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        dataSourceSetting = new javax.swing.JButton();
        fileConfig = new javax.swing.JLabel();
        dirPath = new javax.swing.JTextField();
        backupLab = new javax.swing.JLabel();
        backupPath = new javax.swing.JTextField();
        monitorInfo = new javax.swing.JButton();
        //others
        fileMonitor=new FileMonitorDAO();
        log.setEditable(false);
        dataSourceSetting.setEnabled(false);
        this.setTitle("SPC数据自动收集系统");
		//this.setLocationRelativeTo(getOwner());
        this.setLocationRelativeTo(null);  
        
        Toolkit kit = Toolkit.getDefaultToolkit();    // 定义工具包 
        Dimension screenSize = kit.getScreenSize();   // 获取屏幕的尺寸 
        int screenWidth = screenSize.width/2;         // 获取屏幕的宽 
        int screenHeight = screenSize.height/2;       // 获取屏幕的高 
        int height = this.getHeight(); 
        int width = this.getWidth(); 
        this.setLocation(screenWidth-width/2, screenHeight-height/2); 
        
        //系统托盘
        //检查当前系统是否支持系统托盘
       // final SystemTray  tray = SystemTray.getSystemTray();//获取表示桌面托盘区的 SystemTray 实例。
        Image image  = kit.getImage(this.getClass().getResource("image/monitor.jpg"));
        if (SystemTray.isSupported()) { //当前平台是否支持系统托盘 
	        PopupMenu pop = new PopupMenu(); // 构造一个右键弹出式菜单  
	        MenuItem hide = new MenuItem("隐藏"); 
	        MenuItem show = new MenuItem("打开");  
	        MenuItem exit = new MenuItem("退出"); 
	        pop.add(hide);  
	        pop.add(show);  
	        pop.add(exit);  
	        
	        trayIcon = new TrayIcon(image, "SPC数据自动收集监控系统",  pop);   
	        trayIcon.addMouseListener(new java.awt.event.MouseAdapter(){
	        	
	           @Override
	           public void mouseClicked(MouseEvent e) {
	        	   if (e.getClickCount() == 2) // 鼠标双击  
	               {  
	                   setExtendedState(JFrame.NORMAL);  
	                   setVisible(true); // 显示窗口  
	                   toFront();  
	               }  
	           }     
	        });
	        hide.addActionListener(new ActionListener() {  // 点击“隐藏窗口”菜单后将窗口隐藏起来  
	            public void actionPerformed(ActionEvent e) {  
	                setExtendedState(JFrame.NORMAL);  
	                setVisible(false); // 隐藏窗口  
	                toFront();  
	            }  
	        }); 
	        show.addActionListener(new ActionListener(){  // 点击“显示窗口”菜单后将窗口显示出来   
	            public void actionPerformed(ActionEvent e) {  
	                setExtendedState(JFrame.NORMAL);  
	                setVisible(true); // 显示窗口  
	                toFront();  
	            }  
	        });  
	        exit.addActionListener(new ActionListener(){  // 点击“退出演示”菜单后退出程序  
	            public void actionPerformed(ActionEvent e) { 
				        try {
							DBOptionUtil.close();
						} catch (Throwable e1) {
							e1.printStackTrace();
							log.append(e1.getMessage()+"\n");
						}
				        // 记得在程序退出时手动关闭,否则会造成内存泄漏
				        systemTray.remove(trayIcon);
			           // TaskBarMonitor.getInstance().setEnable(false);
				       // tray.remove(trayIcon); // 从系统的托盘实例中移除托盘图标  
			                System.exit(0); // 退出程序  
	            }  
	        });  
	        try{   
	            //获取托盘菜单 
	            systemTray = SystemTray.getSystemTray(); 
	            //添加托盘图标 
	            systemTray.add(trayIcon); 
	          //   tray.add(trayIcon);  // 将 TrayIcon 添加到 SystemTray。 
	        } catch   (AWTException   e)     {   
	             System.err.println(e);   
	        }
	        /*
	        if (TaskBarMonitor.isSupported()) {
	            TaskBarMonitor.getInstance().addTaskBarListener(
	                    new TaskBarListener() {
	                        @Override
	                        public void taskBarCreated() {
	                            SwingUtilities.invokeLater(new Runnable() {
	                                // 一定要在Swing事件处理线程中调用
	                                // 直接在AWT事件循环线程中调用没有效果
	                                @Override
	                                public void run() {
	                                	 try {
	                                		tray.remove(trayIcon);
											tray.add(trayIcon);
										} catch (AWTException e) {
											// TODO Auto-generated catch block
											e.printStackTrace();
										}
	                                }
	                            });
	                        }
	                    });
	            // 启动监视器
	            TaskBarMonitor.getInstance().setEnable(true);
	        }
            */        
        } //添加托盘
        
        //设置图标
        BufferedImage spcimage = null;
        try {
          spcimage = ImageIO.read(this.getClass().getResource("image/monitor.jpg"));
        } catch (IOException e) {
        	e.printStackTrace();
        }
        this.setIconImage(spcimage);

        
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("数据库连接属性"));

        url.setText("JDBC URL地址:");

//        urlText.setText("jdbc:oracle:thin:@172.30.254.230:1521:DEV1");
        urlText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                urlTextActionPerformed(evt);
            }
        });
        
        monitorInfo.setText("监控目录信息");
        monitorInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                monitorInfoActionPerformed(evt);
            }
        });
        userName.setText("用户名:");

        password.setText("密码:");

//        userNameText.setText("weberp_sim0418");

//        passWordText.setText("sim0418");

        connect.setText("连接");
        connect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
					connectActionPerformed(evt);
				} catch (MappingException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (MalformedURLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
            }
        });

        cancel.setText("取消");
        cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(110, 110, 110)
                        .addComponent(connect)
                        .addGap(55, 55, 55)
                        .addComponent(cancel)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(userName)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(userNameText))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(url)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(urlText))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addComponent(password)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(passWordText, javax.swing.GroupLayout.PREFERRED_SIZE, 355, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(url)
                    .addComponent(urlText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(userName)
                    .addComponent(userNameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(password)
                    .addComponent(passWordText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cancel)
                    .addComponent(connect))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout dataSourceDiglogLayout = new javax.swing.GroupLayout(dataSourceDiglog.getContentPane());
        dataSourceDiglog.getContentPane().setLayout(dataSourceDiglogLayout);
        dataSourceDiglogLayout.setHorizontalGroup(
            dataSourceDiglogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        dataSourceDiglogLayout.setVerticalGroup(
            dataSourceDiglogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dataSourceDiglogLayout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 9, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("日志"));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(log, javax.swing.GroupLayout.DEFAULT_SIZE, 515, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(log, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("菜单"));

        stop.setText("结束监控");
        stop.setActionCommand("关闭监控");
        stop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopActionPerformed(evt);
            }
        });

        start.setText("启动监控");
        start.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startActionPerformed(evt);
            }
        });

        selectType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "复制", "上传" }));
        selectType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectTypeActionPerformed(evt);
            }
        });

        jLabel1.setText("监控类型:");

        dataSourceSetting.setText("数据库连接设置");
        dataSourceSetting.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
					dataSourceSettingActionPerformed(evt);
				} catch (IOException e) {
					e.printStackTrace();
				}
            }
        });

        fileConfig.setText("监控配置文件:");
        dirPath.setText("E:\\SPC\\Monitor Path.txt");
        dirPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dirPathActionPerformed(evt);
            }
        });

        backupLab.setText("监控目录:");
        backupPath.setText("E:\\SPC\\QA_Dest");
        backupPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backupPathActionPerformed(evt);
            }
        });
        
        //最小化隐藏任务栏
        this.addWindowListener(new WindowAdapter(){
            //捕获窗口最小化事件
            public void windowIconified(WindowEvent e){
            	setVisible(false);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(selectType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(dataSourceSetting))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(backupLab)
                                    .addComponent(fileConfig))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(dirPath, javax.swing.GroupLayout.DEFAULT_SIZE, 218, Short.MAX_VALUE)
                                    .addComponent(backupPath)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addComponent(start)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(42, 100, Short.MAX_VALUE)
                        .addComponent(stop)
                        .addComponent(monitorInfo)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    
        		);
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(fileConfig)
                    .addComponent(dirPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backupLab)
                    .addComponent(backupPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(start)
                    .addComponent(stop)
                    .addComponent(dataSourceSetting)
                    .addComponent(monitorInfo))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>
    
   

    //启动监控
    private void startActionPerformed(java.awt.event.ActionEvent evt) {                                         
    	String monitorType="复制".equals(selectType.getSelectedItem())?"copy":"upload";
    	String settingPath=dirPath.getText();
    	String backup=backupPath.getText();
    	
    	if("copy".equals(monitorType)){
    		this.setTitle("SPC数据自动收集系统--文件复制模式");
    		if("".equals(settingPath)||"".equals(backup)){
        		log.append("请输入监控配置文件位置和监控目录!\n");
        	}else if(!settingPath.endsWith("txt")){
        		log.append("监控配置文件只允许为txt文件!\n");
        	}else{
        		monitorable(monitorType,settingPath.trim(),backup.trim());
        	}
    	}else {
    		this.setTitle("SPC数据自动收集系统--数据自动导入模式");
    		if("".equals(backup)){
    			log.append("请输入监控目录!\n");
    		}else{
        		monitorable(monitorType,settingPath.trim(),backup.trim());
        	}
    	}
    }
    
    private void monitorable(String monitorType,String settingPath,String backup){
    	try {
			fileMonitor.startMonitor(monitorType,settingPath,backup);
		} catch (IOException e) {
			log.append(e.getMessage()+"\n");
		} catch (SQLException e) {
			log.append(e.getMessage()+"\n");
		}
    	start.setEnabled(false);
    	stop.setEnabled(true);
    	dirPath.setEditable(false);
    	backupPath.setEditable(false);
    	dataSourceSetting.setEnabled(false);
    	selectType.setEnabled(false);
    }

    //停止监控
    private void stopActionPerformed(java.awt.event.ActionEvent evt) {                                         
    	try {
			fileMonitor.stopMonitor();
		} catch (JNotifyException e) {
			e.printStackTrace();
			log.append(e.getMessage()+"\n");
		} catch (SQLException e) {
			e.printStackTrace();
			log.append(e.getMessage()+"\n");
		}
    	dirPath.setEditable(true);
    	backupPath.setEditable(true);
    	selectType.setEnabled(true);
    	dataSourceSetting.setEnabled(true);
    	start.setEnabled(true);
    	stop.setEnabled(false);
    }                                          

    private void selectTypeActionPerformed(java.awt.event.ActionEvent evt) {                                           
        if("复制".equals(selectType.getSelectedItem())){
        	this.setTitle("SPC数据自动收集系统--文件复制模式");
        	dirPath.setEditable(true);
        	dataSourceSetting.setEnabled(false);
        }else{
            this.setTitle("SPC数据自动收集系统--数据自动导入模式");
        	dirPath.setText("");
        	dirPath.setEditable(false);
        	dataSourceSetting.setEnabled(true);
        }
    }                                          
                                        
  //连接数据库
    private void connectActionPerformed(java.awt.event.ActionEvent evt) throws MappingException, IOException {  
    	String url=urlText.getText();
    	String userName=userNameText.getText();
    	String password=passWordText.getText();
    	DBOptionUtil.dataSourceConf(url, userName, password);
    	dataSourceDiglog.setVisible(false);
    }                                           

    //数据库取消按钮
    private void cancelActionPerformed(java.awt.event.ActionEvent evt) {                                       
    	dataSourceDiglog.setVisible(false);
    }                                       

    private void urlTextActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
    }                                           

    //数据库配置
    private void dataSourceSettingActionPerformed(java.awt.event.ActionEvent evt) throws IOException {                                         
    	dataSourceDiglog.setSize(450, 250);
    	loadProperties();
    	dataSourceDiglog.show();
    	
    }
    
    private void loadProperties() throws IOException{
    	InputStream in = null;
		try {
			in = new BufferedInputStream(new FileInputStream(System.getProperty("user.dir") + "/conf/hibernate.properties"));
			Properties p= new Properties();
			p.load(in);
			urlText.setText(p.getProperty("hibernate.connection.url"));
			userNameText.setText(p.getProperty("hibernate.connection.username"));
			passWordText.setText((p.getProperty("hibernate.connection.password")));
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}finally{
			if(in!=null)
				in.close();
		}

    }
    
    private void monitorInfoActionPerformed(java.awt.event.ActionEvent evt) {                                            
    	fileMonitor.getMonitorInfo();
    }  

    private void dirPathActionPerformed(java.awt.event.ActionEvent evt) {                                        
        // TODO add your handling code here:
    }                                       

    private void backupPathActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // TODO add your handling code here:
    }                                          

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SPCUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SPCUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SPCUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SPCUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
					new SPCUI().setVisible(true);
				} catch (FileNotFoundException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
            }
        });
    }
    // Variables declaration - do not modify                     
    private javax.swing.JLabel backupLab;
    private javax.swing.JTextField backupPath;
    private javax.swing.JButton cancel;
    private javax.swing.JButton connect;
    private javax.swing.JTextField dirPath;
    private javax.swing.JLabel fileConfig;
    private javax.swing.JButton dataSourceSetting;
    private javax.swing.JDialog dataSourceDiglog;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPasswordField passWordText;
    private javax.swing.JTextField urlText;
    private javax.swing.JTextField userNameText;
    private javax.swing.JLabel password;
    private javax.swing.JComboBox selectType;
    private javax.swing.JButton start;
    private javax.swing.JButton stop;
    private javax.swing.JLabel url;
    private javax.swing.JLabel userName;
    private javax.swing.JButton monitorInfo;
    public static FileMonitorDAO fileMonitor; 
    //public static java.awt.TextArea log;
    public static JTextArea log;
    // End of variables declaration                   
}
